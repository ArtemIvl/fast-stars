from decimal import Decimal, InvalidOperation

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.session import SessionLocal
from keyboards.admin_keyboards import back_to_games_keyboard, manage_games_keyboard
from utils.basketball_requests import get_basketball_stats
from utils.cube_requests import get_cube_game_stats
from utils.daily_bonus_requests import bonus_claims_today, total_bonus_amount_claimed
from utils.deposit_requests import get_total_amount_deposited
from utils.game_settings_requests import get_game_setting, update_game_setting
from utils.slot_machine_requests import get_total_slot_spins, get_total_slot_winnings
from utils.vip_requests import get_all_vip_users
from utils.x2game_requests import get_or_create_stats


class AdminGameSettingsState(StatesGroup):
    waiting_for_value = State()


games_admin_router = Router()


@games_admin_router.callback_query(F.data == "manage_games")
async def manage_games_callback(
    callback: types.CallbackQuery, state: FSMContext
) -> None:
    await state.clear()
    async with SessionLocal() as session:
        x2game_stats = await get_or_create_stats(session)
        total_bonus = await total_bonus_amount_claimed(session)
        bonus_today = await bonus_claims_today(session)
        x2_win_chance = await get_game_setting(session, "x2_win_chance")
        basketball_multiplier = await get_game_setting(session, "basketball_multiplier")
        cube_commission = await get_game_setting(session, "cube_commission")
        cube_game_stats = await get_cube_game_stats(session, cube_commission)
        basketball_stats = await get_basketball_stats(session, basketball_multiplier)
        total_vip_users = len(await get_all_vip_users(session))
        total_stars_deposited, total_ton_deposited = await get_total_amount_deposited(
            session
        )
        total_spins = await get_total_slot_spins(session)
        total_slot_winnings = await get_total_slot_winnings(session)

        text = (
            "<b>üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä</b>\n\n"
            "üé≤ <b>X2Game</b>:\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: <code>{x2game_stats.won:.2f}‚≠ê</code>\n"
            f"‚Ä¢ –ü–æ—Ç–µ—Ä—è–Ω–æ: <code>{x2game_stats.lost:.2f}‚≠ê</code>\n"
            f"‚Ä¢ –®–∞–Ω—Å: <b>{x2_win_chance}%</b>\n\n"
            "üèÄ <b>–ë–∞—Å–∫–µ—Ç–±–æ–ª</b>:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: <code>{basketball_stats[0]}</code>\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: <code>{basketball_stats[1]:.2f}‚≠ê</code>\n"
            f"‚Ä¢ –ü–æ—Ç–µ—Ä—è–Ω–æ: <code>{basketball_stats[2]:.2f}‚≠ê</code>\n"
            f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞: <b>X{basketball_multiplier}</b>\n\n"
            "üé≤ <b>–ö—É–±–∏–∫–∏</b>:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: <code>{cube_game_stats[0]}</code>\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: <code>{cube_game_stats[1]:.2f}‚≠ê</code>\n"
            f"‚Ä¢ –ü–æ—Ç–µ—Ä—è–Ω–æ: <code>{cube_game_stats[2]:.2f}‚≠ê</code>\n"
            f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞: <code>{cube_game_stats[3]:.2f}‚≠ê</code>\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: <b>{cube_commission}%</b>\n\n"
            "üé∞ <b>–°–ª–æ—Ç –º–∞—à–∏–Ω–∞</b>:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: <code>{total_spins}</code>\n"
            f"‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: <code>{total_slot_winnings}‚≠ê</code>\n\n"
            f"–û–Ω–ª–∞–π–Ω –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{bonus_today}</code>\n"
            f"–í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: <code>{total_bonus:.2f}‚≠ê</code>\n"
            f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö VIP: <code>{total_vip_users}</code>\n"
            f"–í—Å–µ–≥–æ –∑–∞–¥–æ–Ω–∞—á–µ–Ω–æ TON: <code>{total_ton_deposited:.3f} TON</code>\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞ –¥–æ–Ω–∞—Ç: <code>{total_stars_deposited}‚≠ê</code>\n\n"
        )

        await callback.message.edit_text(
            text, parse_mode="HTML", reply_markup=manage_games_keyboard()
        )


@games_admin_router.callback_query(
    F.data.in_({"change_x2game", "change_basketball", "change_cube"})
)
async def start_setting_change(callback: types.CallbackQuery, state: FSMContext):
    setting_map = {
        "change_x2game": "x2_win_chance",
        "change_basketball": "basketball_multiplier",
        "change_cube": "cube_commission",
    }
    key = setting_map[callback.data]
    await state.set_state(AdminGameSettingsState.waiting_for_value)
    await state.update_data(setting_key=key)

    field_names = {
        "x2_win_chance": "—à–∞–Ω—Å –ø–æ–±–µ–¥—ã –≤ X2Game (%)",
        "basketball_multiplier": "–º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–±–µ–¥—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5)",
        "cube_commission": "–∫–æ–º–∏—Å—Å–∏—é –≤ –∫—É–±–∏–∫–∞—Ö (%)",
    }
    sent = await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: <b>{field_names[key]}</b>",
        parse_mode="HTML",
        reply_markup=back_to_games_keyboard(),
    )
    await state.update_data(last_bot_message_id=sent.message_id)


@games_admin_router.message(AdminGameSettingsState.waiting_for_value)
async def set_setting_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_msg_id = data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass
    try:
        value = Decimal(message.text.replace(",", "."))
        if value <= 0 or value > 100:
            sent = await message.answer(
                "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –Ω–µ –±–æ–ª—å—à–µ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=back_to_games_keyboard(),
            )
            await state.update_data(last_bot_message_id=sent.message_id)
            return
    except InvalidOperation:
        sent = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=back_to_games_keyboard()
        )
        await state.update_data(last_bot_message_id=sent.message_id)
        return

    key = data.get("setting_key")

    async with SessionLocal() as session:
        await update_game_setting(session, key, value)

    await message.answer(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=back_to_games_keyboard()
    )
    await state.clear()

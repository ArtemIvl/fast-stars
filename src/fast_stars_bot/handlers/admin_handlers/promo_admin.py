from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.session import SessionLocal
from decimal import Decimal, InvalidOperation
from utils.promo_requests import is_promo_code_unique, add_promo_code
from keyboards.admin_keyboards import manage_promo_keyboard, promo_pages_keyboard, back_to_promo_keyboard
from utils.promo_requests import get_promo_code, get_promo_activations_page
import re
from db.models.promo_code import PromoCode, PromoActivation

promo_admin_router = Router()


class AddPromoState(StatesGroup):
    waiting_for_promo_code = State()
    waiting_for_activations = State()
    waiting_for_is_vip = State()
    waiting_for_reward = State()

class PromoInfoState(StatesGroup):
    waiting_for_promo_query = State()

@promo_admin_router.callback_query(F.data == "manage_promocodes")
async def manage_promocodes_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:", reply_markup=manage_promo_keyboard()
    )

@promo_admin_router.callback_query(F.data == "add_promo_code")
async def add_promo_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    sent = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=back_to_promo_keyboard())
    await state.update_data(last_bot_message_id=sent.message_id)
    await state.set_state(AddPromoState.waiting_for_promo_code)

@promo_admin_router.message(AddPromoState.waiting_for_promo_code)
async def add_promo_name(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    last_msg_id = data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass
    code = message.text.strip()
    if not re.fullmatch(r"[A-Za-z0-9_!?,]{1,20}", code):
        sent = await message.answer(
            "‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã _ ! ? ,\n"
            "–û–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=back_to_promo_keyboard()
        )
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    
    async with SessionLocal() as session:
        if not await is_promo_code_unique(session, code):
            sent = await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.", reply_markup=back_to_promo_keyboard())
            await state.update_data(last_bot_message_id=sent.message_id)
            return

    await state.update_data(promo_code=code)
    sent = await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:", reply_markup=back_to_promo_keyboard())
    await state.update_data(last_bot_message_id=sent.message_id)
    await state.set_state(AddPromoState.waiting_for_activations)

@promo_admin_router.message(AddPromoState.waiting_for_activations)
async def add_promo_activations(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    last_msg_id = data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass
    try:
        activations = int(message.text)
        if activations <= 0:
            sent = await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_promo_keyboard())
            await state.update_data(last_bot_message_id=sent.message_id)
            return
        await state.update_data(activations=activations)
    except ValueError:
        sent = await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_promo_keyboard())
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    sent = await message.answer("–≠—Ç–æ –≤–∏–ø –ø—Ä–æ–º–æ? (–¥–∞/–Ω–µ—Ç)")
    await state.update_data(last_bot_message_id=sent.message_id)
    await state.set_state(AddPromoState.waiting_for_is_vip)

@promo_admin_router.message(AddPromoState.waiting_for_is_vip)
async def add_promo_vip_state(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    last_msg_id = data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass
    try:
        vip_promo = message.text.strip().lower()
        if vip_promo not in ["–¥–∞", "–Ω–µ—Ç"]:
            sent = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.", reply_markup=back_to_promo_keyboard())
            await state.update_data(last_bot_message_id=sent.message_id)
            return
        await state.update_data(is_vip=vip_promo)
    except ValueError:
        sent = await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_promo_keyboard())
        await state.update_data(last_bot_message_id=sent.message_id)
        return
    sent = await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é (‚≠êÔ∏è):", reply_markup=back_to_promo_keyboard())
    await state.update_data(last_bot_message_id=sent.message_id)
    await state.set_state(AddPromoState.waiting_for_reward)

@promo_admin_router.message(AddPromoState.waiting_for_reward)
async def add_promo_reward(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    last_msg_id = data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass
    try:
        reward = Decimal(message.text)
        if reward <= 0:
            sent = await message.answer("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_promo_keyboard())
            await state.update_data(last_bot_message_id=sent.message_id)
            return
        await state.update_data(reward=reward)
    except InvalidOperation:
        sent = await message.answer("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_promo_keyboard())
        await state.update_data(last_bot_message_id=sent.message_id)
        return

    data = await state.get_data()
    promo_code = data.get("promo_code")
    max_activations = data.get("activations")
    is_vip = data.get("is_vip") == "–¥–∞"
    reward = data.get("reward")

    async with SessionLocal() as session:
        await add_promo_code(session, promo_code, max_activations, is_vip, reward)

    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å {max_activations} –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏ –∏ –Ω–∞–≥—Ä–∞–¥–æ–π {reward}‚≠êÔ∏è.", reply_markup=back_to_promo_keyboard())
    await state.clear()


@promo_admin_router.callback_query(F.data == "view_promo_code")
async def view_promo_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    sent = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=back_to_promo_keyboard())
    await state.update_data(last_bot_message_id=sent.message_id)
    await state.set_state(PromoInfoState.waiting_for_promo_query)

def generate_promo_info_text(promo: PromoCode, activations: list[PromoActivation], page: int = 1, per_page: int = 10) -> tuple[str, types.InlineKeyboardMarkup | None]:
    total_activations = promo.max_activations - promo.activations_left
    pages = (total_activations + per_page - 1) // per_page
    start = (page - 1) * per_page

    text = (
        f"üí¨ –ü—Ä–æ–º–æ–∫–æ–¥: <b>{promo.code}</b>\n"
        f"üîÅ –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: <b>{promo.activations_left}</b> –∏–∑ {promo.max_activations}\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: <b>{promo.reward:.2f}‚≠êÔ∏è</b>\n\n"
    )

    if total_activations > 0:
        text += "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥:\n"
        for i, activation in enumerate(activations, start + 1):
            user = activation.user
            text += f"{i}. @{user.username or 'None'} | ID: {user.telegram_id}\n"
    else:
        text += "‚õî –ü—Ä–æ–º–æ–∫–æ–¥ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª."

    kb = promo_pages_keyboard(promo.code, page, pages)
    return text, kb

@promo_admin_router.message(PromoInfoState.waiting_for_promo_query)
async def process_promo_query(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    last_msg_id = data.get("last_bot_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, last_msg_id)
        except Exception:
            pass
    code = message.text.strip()
    async with SessionLocal() as session:
        promo = await get_promo_code(session, code)
        if not promo:
            sent = await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_promo_keyboard())
            await state.update_data(last_bot_message_id=sent.message_id)
            return

        activations = await get_promo_activations_page(session, promo.id, page=1)
        text, kb = generate_promo_info_text(promo, activations, page=1)
        await message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.clear()

@promo_admin_router.callback_query(F.data.startswith("promo_page_"))
async def handle_promo_page(callback: types.CallbackQuery) -> None:
    _, _, code, page_str = callback.data.split("_")
    page = int(page_str)

    async with SessionLocal() as session:
        promo = await get_promo_code(session, code)
        if not promo:
            await callback.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        activations = await get_promo_activations_page(session, promo.id, page=page)
        text, kb = generate_promo_info_text(promo, activations, page=page)
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await callback.answer()
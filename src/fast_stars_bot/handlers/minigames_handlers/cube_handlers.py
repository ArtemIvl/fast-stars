from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.enums import DiceEmoji
from aiogram.fsm.state import State, StatesGroup
from db.session import SessionLocal
from keyboards.cube_keyboard import cube_keyboard, back_to_cube_keyboard, end_game_keyboard, throw_cube_keyboard, back_to_cube_menu_keyboard
from utils.cube_requests import find_waiting_game, create_game, join_game, finish_game, get_game_by_id, cancel_game, handle_throw_timeout
from utils.user_requests import get_user_by_telegram_id, get_user_by_id
from db.models.user import User
from db.models.cube_game import GameStatus
from decimal import Decimal
from aiogram.exceptions import TelegramBadRequest
import asyncio
from aiogram import Bot
import time

router = Router()

def register_cube_handlers(dp) -> None:
    dp.include_router(router)

class CubeGameState(StatesGroup):
    waiting_for_p1 = State()
    waiting_for_p2 = State()

active_throws = set()
user_cooldowns: dict[int, float] = {}
pending_throws: dict[int, asyncio.Task] = {}
throw_messages: dict[int, tuple[int, int]] = {}

async def start_throw_timeout(game_id: int, user_id: int, bet: Decimal, user: User, bot: Bot):
    await asyncio.sleep(30)

    chat_msg = throw_messages.pop(game_id, None)
    if chat_msg:
        chat_id, msg_id = chat_msg
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except TelegramBadRequest:
            pass

    async with SessionLocal() as session:
        leaver, other_player, game = await handle_throw_timeout(session, game_id, user_id, bet)
        if not game:
            return
        
    try:
        await bot.send_message(
            leaver.telegram_id,
            "‚è≥ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É, –Ω–µ –¥–æ–∏–≥—Ä–∞–≤ –µ—ë –¥–æ –∫–æ–Ω—Ü–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å–ø–∏—Å–∞–Ω–∞.",
            reply_markup=back_to_cube_menu_keyboard()
        )
    except Exception:
        pass

    try:
        await bot.send_message(
            other_player.telegram_id,
            f"@{leaver.username or '–ò–≥—Ä–æ–∫'} –≤—ã—à–µ–ª ü§∑üèª‚Äç‚ôÇÔ∏è\n"
            "–ñ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–í—ã–π—Ç–∏¬ª, —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç–æ–ª.",
            reply_markup=back_to_cube_keyboard(game.id)
        )
    except Exception:
        pass

    pending_throws.pop(game_id, None)
    active_throws.discard((game_id, 1))
    active_throws.discard((game_id, 2))


@router.callback_query(F.data == "cube_game")
async def cube_game_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    kb = await cube_keyboard()
    await callback.message.edit_text(
        "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Cube Game!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª ‚Äî –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Å—Ç–∞–≤–∫–∞: 1, 5 –∏–ª–∏ 10 ‚≠êÔ∏è.\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –∂–¥–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ö–æ–≥–¥–∞ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è, –≤—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±—Ä–æ—Å–∞–µ—Ç–µ –∫—É–±–∏–∫–∏.\n"
        "‚Ä¢ üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî —Ç–æ—Ç, —É –∫–æ–≥–æ –≤—ã–ø–∞–¥–µ—Ç –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, –∑–∞–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫!\n"
        "‚Ä¢ üí∏ –í—ã–∏–≥—Ä—ã—à: √ó2 –æ—Ç —Å—Ç–∞–≤–∫–∏ –º–∏–Ω—É—Å 20% –∫–æ–º–∏—Å—Å–∏–∏ –∏–≥—Ä—ã.\n"
        "‚Ä¢ ‚ôªÔ∏è –ù–∏—á—å—è: –ï—Å–ª–∏ —á–∏—Å–ª–∞ —Å–æ–≤–ø–∞–ª–∏ ‚Äî –±—Ä–æ—Å–∞–µ—Ç–µ –∫—É–±–∏–∫–∏ –∑–∞–Ω–æ–≤–æ.\n\n"
        "üîç –ò—â–µ—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞? –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç ‚Äî https://t.me/+mKubmWJxJM5mZDUy\n\n"
        "–ì–æ—Ç–æ–≤—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É? –¢–æ–≥–¥–∞ –∑–∞ —Å—Ç–æ–ª!üëáüèª",
        disable_web_page_preview=True,
        reply_markup=kb
    )


@router.callback_query(F.data.startswith("cube_bet_"))
async def play_cube_game(callback: types.CallbackQuery) -> None:
    bet_amount = Decimal(callback.data.split("_")[-1])
    telegram_id = callback.from_user.id

    last_exit = user_cooldowns.get(telegram_id)
    if last_exit and (time.time() - last_exit) < 15:
        remaining = 15 - int(time.time() - last_exit)
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—Ö–æ–¥–æ–º", show_alert=True)
        return

    async with SessionLocal() as session:
        # clean up cancelled games here
        user: User = await get_user_by_telegram_id(session, telegram_id)
        if not user or user.stars < bet_amount:
            await callback.answer(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è —Å—Ç–∞–≤–∫–∏! ‚≠êÔ∏è",
                show_alert=True,
            )
            return

        waiting_game = await find_waiting_game(session, bet_amount)

        if not waiting_game:
            game = await create_game(session, user, bet_amount)
            await callback.message.edit_text(
                f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å—Ç–æ–ª—É —Å–æ —Å—Ç–∞–≤–∫–æ–π {bet_amount} ‚≠êÔ∏è.\n"
                "–ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É üé≤\n\n"
                "‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –∏–≥—Ä—É —Å–æ –≤—Ç–æ—Ä—ã–º –∏–≥—Ä–æ–∫–æ–º, –ø–æ–∫–∏–Ω—É—Ç—å –µ—ë –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏!\n\n"
                "‚è±Ô∏è–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –±—Ä–æ—Å–æ–∫!",
                reply_markup=back_to_cube_keyboard(game.id)
            )
        else:
            game = await join_game(session, waiting_game, user)

            player1 = await get_user_by_id(session, game.player1_id)
            player2 = user

            if player1.telegram_id:
                msg = await callback.bot.send_message(
                    player1.telegram_id,
                    f"–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å ü§ù\nüë§ @{player1.username or '–ò–≥—Ä–æ–∫'} –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫.",
                    reply_markup=throw_cube_keyboard(game.id, 1)
                )
                throw_messages[game.id] = (msg.chat.id, msg.message_id)            
            task = asyncio.create_task(start_throw_timeout(game.id, player1.id, game.bet, player1, callback.bot))
            pending_throws[game.id] = task

            if player2.telegram_id:
                await callback.bot.send_message(
                    player2.telegram_id,
                    f"–í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å ü§ù\nüë§ @{player1.username or '–ò–≥—Ä–æ–∫'} –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫."
                )


@router.callback_query(F.data.startswith("throw_cube_"))
async def handle_throw_cube(callback: types.CallbackQuery, state: FSMContext) -> None:
            parts = callback.data.split("_")
            game_id = int(parts[2])
            player  = int(parts[3])
            first_value = int(parts[4]) if len(parts) == 5 else None

            key = (game_id, player)
            if key in active_throws:
                await callback.answer("‚è≥ –í—ã —É–∂–µ –±—Ä–æ—Å–∏–ª–∏ –∫—É–±–∏–∫", show_alert=True)
                return
            
            active_throws.add(key)

            async with SessionLocal() as session:
                game = await get_game_by_id(session, game_id)
                if not game:
                    await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return
                
                player1 = await get_user_by_id(session, game.player1_id)
                player2 = await get_user_by_id(session, game.player2_id)

                sent_dice = await callback.message.answer_dice(emoji=DiceEmoji.DICE)
                await callback.message.edit_reply_markup(reply_markup=None)
                value = sent_dice.dice.value
                await asyncio.sleep(4)

                if player == 1:
                    task = pending_throws.pop(game.id, None)
                    if task:
                        task.cancel()
                    await callback.bot.forward_message(
                        chat_id=player2.telegram_id,
                        from_chat_id=player1.telegram_id,
                        message_id=sent_dice.message_id
                    )
                     
                    txt_p1 = f"üë§ @{player1.username or '–ò–≥—Ä–æ–∫'} –≤—ã–±–∏–ª {value}.\n" \
                             f"üë§ @{player2.username or '–ò–≥—Ä–æ–∫'} –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫!"
                    kb = types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(
                                text="üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫",
                                callback_data=f"throw_cube_{game_id}_2_{value}"
                            )]
                        ]
                    )

                    await callback.bot.send_message(player2.telegram_id, txt_p1, reply_markup=kb)
                    await callback.bot.send_message(player1.telegram_id, txt_p1)

                    task = asyncio.create_task(start_throw_timeout(game.id, player2.id, game.bet, player2, callback.bot))
                    pending_throws[game.id] = task

                    await callback.answer()

                    return

                else:
                    task = pending_throws.pop(game.id, None)
                    if task:
                        task.cancel()

                    p1_result = first_value
                    p2_result = value

                    await callback.bot.forward_message(
                        chat_id=player1.telegram_id,
                        from_chat_id=player2.telegram_id,
                        message_id=sent_dice.message_id
                    )

                    # info = (
                    #     f"üë§ @{player2.username or '–ò–≥—Ä–æ–∫'} –±—Ä–æ—Å–∏–ª –∫—É–±–∏–∫ –∏ –≤—ã–±–∏–ª {p2_result}."
                    # )
                    # await asyncio.gather(
                    #     callback.bot.send_message(player1.telegram_id, info),
                    #     callback.bot.send_message(player2.telegram_id, info)
                    # )
                    if p1_result == p2_result:
                        active_throws.discard((game_id, 1))
                        active_throws.discard((game_id, 2))
                        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
                        await callback.bot.send_message(
                            player1.telegram_id,
                            "–ù–∏—á—å—è! üé≤\n–ö–∏–¥–∞–µ–º –∫—É–±–∏–∫–∏ –∑–∞–Ω–æ–≤–æ.",
                            reply_markup=throw_cube_keyboard(game.id, 1)   # —Ç—É—Ç –∫–Ω–æ–ø–∫–∞
                        )

                        # –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                        await callback.bot.send_message(
                            player2.telegram_id,
                            "–ù–∏—á—å—è! üé≤\n–û–∂–∏–¥–∞–µ–º —Ö–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞."
                        )

                        task = asyncio.create_task(start_throw_timeout(game.id, player1.id, game.bet, player1, callback.bot))
                        pending_throws[game.id] = task

                        await state.clear()
                        await callback.answer()
                        return

                    winner = await finish_game(session, game, p1_result, p2_result)

                    msg = (
                        f"üë§ @{player2.username} –≤—ã–ø–∞–ª–æ {p2_result}.\n"
                        f"<b>@{winner.username} –ø–æ–±–µ–¥–∏–ª! üéâ</b>\n"
                        f"<b>–í–∞—à –±–∞–ª–∞–Ω—Å: {player1.stars:.2f} ‚≠êÔ∏è</b>\n"
                        f"<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º?üëáüèª</b>"
                    )
                    await callback.bot.send_message(player1.telegram_id, msg, parse_mode="HTML", reply_markup=end_game_keyboard(game.bet))

                    msg = (
                        f"üë§ @{player2.username} –≤—ã–ø–∞–ª–æ {p2_result}.\n"
                        f"<b>@{winner.username} –ø–æ–±–µ–¥–∏–ª! üéâ</b>\n"
                        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {player2.stars:.2f} ‚≠êÔ∏è\n"
                        f"<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º?üëáüèª</b>"
                    )
                    await callback.bot.send_message(player2.telegram_id, msg, parse_mode="HTML", reply_markup=end_game_keyboard(game.bet))

                active_throws.discard(key)
                await callback.answer()
                

@router.callback_query(F.data.startswith("cancel_game_"))
async def cancel_game_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    game_id = int(callback.data.split("_")[-1])
    telegram_id = callback.from_user.id

    async with SessionLocal() as session:
        game = await get_game_by_id(session, game_id)
        user = await get_user_by_telegram_id(session, telegram_id)
        if game and game.status == GameStatus.WAITING and game.player1_id == user.id:
            await cancel_game(session, game)
            user_cooldowns[telegram_id] = time.time()
            sent = await callback.message.answer("‚ùå –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É.")
            kb = await cube_keyboard()
            await callback.message.edit_text(
                "üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Cube Game!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª ‚Äî –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Å—Ç–∞–≤–∫–∞: 1, 5 –∏–ª–∏ 10 ‚≠êÔ∏è.\n"
                "‚Ä¢ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –∂–¥–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ö–æ–≥–¥–∞ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è, –≤—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±—Ä–æ—Å–∞–µ—Ç–µ –∫—É–±–∏–∫–∏.\n"
                "‚Ä¢ üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî —Ç–æ—Ç, —É –∫–æ–≥–æ –≤—ã–ø–∞–¥–µ—Ç –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, –∑–∞–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫!\n"
                "‚Ä¢ üí∏ –í—ã–∏–≥—Ä—ã—à: √ó2 –æ—Ç —Å—Ç–∞–≤–∫–∏ –º–∏–Ω—É—Å 20% –∫–æ–º–∏—Å—Å–∏–∏ –∏–≥—Ä—ã.\n"
                "‚Ä¢ ‚ôªÔ∏è –ù–∏—á—å—è: –ï—Å–ª–∏ —á–∏—Å–ª–∞ —Å–æ–≤–ø–∞–ª–∏ ‚Äî –±—Ä–æ—Å–∞–µ—Ç–µ –∫—É–±–∏–∫–∏ –∑–∞–Ω–æ–≤–æ.\n\n"
                "üîç –ò—â–µ—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞? –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç ‚Äî https://t.me/+mKubmWJxJM5mZDUy\n\n"
                "–ì–æ—Ç–æ–≤—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É? –¢–æ–≥–¥–∞ –∑–∞ —Å—Ç–æ–ª!üëáüèª",
                disable_web_page_preview=True,
                reply_markup=kb,
            )
            await asyncio.sleep(5)
            await sent.delete()
            await state.clear()


@router.callback_query(F.data == "cube_refresh")
async def refresh_cube_menu(callback: types.CallbackQuery) -> None:
    kb = await cube_keyboard()
    try:
        await callback.message.edit_reply_markup(reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–£–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ ‚úÖ", show_alert=False)
            return
        raise

    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", show_alert=False)


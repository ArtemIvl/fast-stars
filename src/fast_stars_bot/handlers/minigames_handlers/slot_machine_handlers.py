import asyncio
from decimal import Decimal

from aiogram import F, Router, types
from aiogram.enums import DiceEmoji
from aiogram.fsm.context import FSMContext
from db.session import SessionLocal
from keyboards.slot_machine_keyboard import (
    back_to_slot_machine_keyboard,
    slot_machine_keyboard,
)
from utils.slot_machine_requests import log_slot_machine_spin
from utils.user_requests import get_user_by_telegram_id

router = Router()


def register_slot_machine_settings(dp) -> None:
    dp.include_router(router)


@router.callback_query(F.data == "slot_machine")
async def basketball_game_callback(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(
        "<b>üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Slot Machine!</b>\n"
        "<blockquote>–ü–æ—á—É–≤—Å—Ç–≤—É–π –∞–∑–∞—Ä—Ç –∏ —Å–æ—Ä–≤–∏ –¥–∂–µ–∫–ø–æ—Ç –ø—Ä—è–º–æ –≤ Telegram!</blockquote>\n\n"
        "<b>üîπ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
        "<blockquote>1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤: <b>1, 5 –∏–ª–∏ 10</b>.\n"
        "2Ô∏è‚É£ –°–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ ‚≠êÔ∏è.\n"
        "3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–π –±–∞—Ä–∞–±–∞–Ω—ã ‚Äî –∏ –∏—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É!</blockquote>\n"
        "4Ô∏è‚É£ üé∞ <b>–í—ã–ø–∞–ª–æ —Ç—Ä–∏ 777 ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å –•15!</b>\n"
        "5Ô∏è‚É£ üìç <b>–ï—Å–ª–∏ –≤—ã–ø–∞–¥–∞–µ—Ç 2 —Å–µ–º—ë—Ä–∫–∏ ‚Äî –ø–æ–ª—É—á–∞–µ—à—å 1‚≠êÔ∏è</b>\n"
        "6Ô∏è‚É£ üí• <b>–í—ã–ø–∞–ª–æ –ª—é–±—ã–µ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å –•5!</b>\n"
        "7Ô∏è‚É£ üß® <b>–ï—Å–ª–∏ –Ω–µ –≤—ã–ø–∞–ª–æ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–∞ –∏–ª–∏ –¥–≤–µ 77</b> ‚Äî —É–≤—ã, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å.\n\n"
        "<b>üí° –ß–µ–º –±–æ–ª—å—à–µ —Å–ø–∏–Ω–æ–≤ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å —Å–æ—Ä–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à!üëáüèª</b>",
        parse_mode="HTML",
        reply_markup=slot_machine_keyboard(),
    )


@router.callback_query(F.data.startswith("slot_machine_"))
async def basketball_payment(callback: types.CallbackQuery, state: FSMContext) -> None:
    amount = int(callback.data.split("_")[-1])

    invoice = await callback.bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–æ–≤",
        description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–ª–æ—Ç –º–∞—à–∏–Ω—É",
        payload=f"slot_machine_{amount}",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label="–°–ø–∏–Ω—ã", amount=amount)],
        start_parameter="slot_machine",
    )

    async def delete_invoice_later():
        await asyncio.sleep(15)
        try:
            await callback.bot.delete_message(callback.from_user.id, invoice.message_id)
        except Exception:
            pass

    asyncio.create_task(delete_invoice_later())


@router.pre_checkout_query(lambda q: True)
async def pre_checkout_query_handler(
    pre_checkout_query: types.PreCheckoutQuery,
) -> None:
    await pre_checkout_query.bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
    )


@router.message(
    F.successful_payment,
    F.successful_payment.invoice_payload.startswith("slot_machine"),
)
async def successful_slot_machine_payment(message: types.Message) -> None:
    number_of_spins = int(message.successful_payment.total_amount)
    telegram_id = message.from_user.id
    total_reward = Decimal(0)
    results_text = []

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)

        for i in range(number_of_spins):
            sent_dice = await message.answer_dice(emoji=DiceEmoji.SLOT_MACHINE)
            result = sent_dice.dice.value

            if result in (1, 22, 43):
                reward = Decimal(5)
            elif result in (16, 32, 48, 52, 56, 60, 61, 62, 63):
                reward = Decimal(1)
            elif result == 64:
                reward = Decimal(15)
            else:
                reward = Decimal(0)

            await log_slot_machine_spin(session, user, reward)
            total_reward += reward
            results_text.append(
                f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç #{i+1}: {'+{}‚≠ê'.format(reward) if reward > 0 else '–Ω–∏—á–µ–≥–æ'}"
            )
            await asyncio.sleep(3)

    text = (
        "üé∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∫—Ä—É—Ç–æ–≤:</b>\n\n"
        + "\n".join(results_text)
        + f"\n\nüí∞ <b>–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à:</b> {total_reward}‚≠ê"
    )

    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=back_to_slot_machine_keyboard(number_of_spins),
    )

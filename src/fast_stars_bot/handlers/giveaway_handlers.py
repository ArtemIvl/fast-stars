from utils.giveaway_requests import get_tickets_for_giveaway, buy_tickets_for_giveaway, get_tickets_per_user, get_all_active_giveaways, get_giveaway_by_id
from utils.user_requests import get_user_by_telegram_id
from aiogram import F, Router, types
from db.session import SessionLocal
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from keyboards.giveaway_keyboard import giveaway_tickets_keyboard, giveaways_keyboard
import asyncio
from pytz import timezone

router = Router()

kyiv_tz = timezone("Europe/Kyiv")

def register_giveaway_handlers(dp) -> None:
    dp.include_router(router)

def plural_ru(number: int, forms: tuple[str, str, str]) -> str:
    if 11 <= number % 100 <= 14:
        return forms[2]
    if number % 10 == 1:
        return forms[0]
    if 2 <= number % 10 <= 4:
        return forms[1]
    return forms[2]

def format_timedelta_ru(td: timedelta) -> str:
    total_seconds = int(td.total_seconds())
    days, remainder = divmod(total_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes = remainder // 60

    parts = []
    if days > 0:
        parts.append(f"{days} {plural_ru(days, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}")
    if hours > 0:
        parts.append(f"{hours} {plural_ru(hours, ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))}")
    if minutes > 0:
        parts.append(f"{minutes} {plural_ru(minutes, ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'))}")

    return " ".join(parts) if parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"

@router.callback_query(F.data == "giveaways")
async def giveaways_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    async with SessionLocal() as session:
        giveaways = await get_all_active_giveaways(session)
        await callback.message.edit_text(
            "C–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:",
            reply_markup=giveaways_keyboard(giveaways)
        )

@router.callback_query(F.data.startswith("view_giveaway_"))
async def view_giveaway_callback(callback: types.CallbackQuery) -> None:
    giveaway_id = int(callback.data.split("_")[2])
    telegram_id = callback.from_user.id
    async with SessionLocal() as session:
        giveaway = await get_giveaway_by_id(session, giveaway_id)
        tickets = await get_tickets_for_giveaway(session, giveaway.id)
        user = await get_user_by_telegram_id(session, telegram_id)
        tickets_bought = await get_tickets_per_user(session, giveaway.id, user.id)
        end = giveaway.end_time.astimezone(kyiv_tz).strftime("%d.%m.%Y %H:%M")

    text = (
        "<b>üéÅ –†–æ–∑—ã–≥—Ä—ã—à 1000‚≠êÔ∏è –Ω–∞ 50 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéâ</b>\n"
        "<blockquote>–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–π —á–∞—Å—Ç—å –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞!</blockquote>\n\n"
        "<b>–ö—É–ø–∏ –±–∏–ª–µ—Ç –≤—Å–µ–≥–æ –∑–∞ 1‚≠ê –∏ –ø–æ–ª—É—á–∏ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ 50 —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤!üèÜ</b>\n"
        "<blockquote>‚ùóÔ∏è–ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!üî•</blockquote>\n\n"
        "<b>üìå –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>\n"
        "‚Ä¢ 1 –±–∏–ª–µ—Ç = 1‚≠ê\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
        f"‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî {giveaway.num_of_winners} —á–µ–ª–æ–≤–µ–∫\n"
        f"‚Ä¢ –ò—Ç–æ–≥–∏ ‚Äî {end}\n"
        "‚Ä¢ –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æü´°\n\n"
        "<b>üèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤</b>:\n"
        "ü•á 1 –º–µ—Å—Ç–æ ‚Äî 120 ‚≠ê\n"
        "ü•à 2 –º–µ—Å—Ç–æ ‚Äî 90 ‚≠ê\n"
        "ü•â 3 –º–µ—Å—Ç–æ ‚Äî 70 ‚≠ê\n"
        "4‚Äì10 –º–µ—Å—Ç–∞ ‚Äî –ø–æ 40 ‚≠ê\n"
        "11‚Äì20 –º–µ—Å—Ç–∞ ‚Äî –ø–æ 20 ‚≠ê\n"
        "21‚Äì50 –º–µ—Å—Ç–∞ ‚Äî –ø–æ 8 ‚≠ê\n\n"
        "üß† –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –±–æ—Ç–æ–º\n"
        "‚≠ê –í—Å–µ –ø—Ä–∏–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
        "üì¢ –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Ä–∞—Å—Å—ã–ª–∫–µü´°\n\n"
    )

    unique_users = len(set(ticket.user_id for ticket in tickets))
    remaining_time = format_timedelta_ru(giveaway.end_time - datetime.now(kyiv_tz))

    text += (
        "<blockquote>‚ú® –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî —É—á–∞—Å—Ç–≤—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
    )

    if tickets_bought == 0:
        text += (
            f"üéü –í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"
        )
    else:
        text += (
            f"üéü –£ —Ç–µ–±—è —É–∂–µ: <b>{tickets_bought} –±–∏–ª–µ—Ç(-–æ–≤)</b>"
        )

    text += (
        f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{unique_users}</b>\n"
        f"‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{remaining_time}</b></blockquote>"
        "\n\n<b>üõí –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∏–∂–µ:üëáüèª</b>"
    )

    await callback.message.edit_text(
        text=text,
        parse_mode="HTML",
        reply_markup=giveaway_tickets_keyboard(giveaway)
    )

@router.callback_query(F.data.startswith("buy_tickets_"))
async def buy_giveaway_ticket(callback: types.CallbackQuery):
    amount = int(callback.data.split("_")[-1])
    giveaway_id = int(callback.data.split("_")[2])

    invoice = await callback.bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ë–∏–ª–µ—Ç(-—ã) –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à",
        description="–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ",
        payload=f"giveaway_tickets_{giveaway_id}",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label="–ë–∏–ª–µ—Ç—ã", amount=amount)],
        start_parameter=f"giveaway_tickets_{giveaway_id}"
    )

    async def delete_invoice_later():
        await asyncio.sleep(15)
        try:
            await callback.bot.delete_message(callback.from_user.id, invoice.message_id)
        except Exception:
            pass

    asyncio.create_task(delete_invoice_later())


@router.pre_checkout_query(lambda q: True)
async def pre_checkout_query_handler(pre_checkout_query: types.PreCheckoutQuery) -> None:
    await pre_checkout_query.bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
    )

@router.message(F.successful_payment, F.successful_payment.invoice_payload.startswith("giveaway_tickets_"))
async def successful_giveaway_payment(message: types.Message) -> None:
    amount = int(message.successful_payment.total_amount)
    giveaway_id = int(message.successful_payment.invoice_payload.split("_")[2])
    telegram_id = message.from_user.id

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        giveaway = await get_giveaway_by_id(session, giveaway_id)
        await buy_tickets_for_giveaway(session, giveaway.id, user.id, amount)

    message = await message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {amount} –±–∏–ª–µ—Ç(-–æ–≤)! ‚úÖ"
    )

    async def delete_message_later():
        await asyncio.sleep(10)
        try:
            await message.bot.delete_message(message.from_user.id, message.message_id)
        except Exception:
            pass

    asyncio.create_task(delete_message_later())

import asyncio
from datetime import datetime, timedelta

from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from db.session import SessionLocal
from keyboards.giveaway_keyboard import giveaway_tickets_keyboard, giveaways_keyboard
from pytz import timezone
from services.giveaway_scheduler import generate_prizes
from utils.giveaway_requests import (
    buy_tickets_for_giveaway,
    get_all_active_giveaways,
    get_giveaway_by_id,
    get_tickets_for_giveaway,
    get_tickets_per_user,
)
from utils.user_requests import get_user_by_telegram_id

router = Router()

kyiv_tz = timezone("Europe/Kyiv")


def register_giveaway_handlers(dp) -> None:
    dp.include_router(router)


def plural_ru(number: int, forms: tuple[str, str, str]) -> str:
    if 11 <= number % 100 <= 14:
        return forms[2]
    if number % 10 == 1:
        return forms[0]
    if 2 <= number % 10 <= 4:
        return forms[1]
    return forms[2]


def format_timedelta_ru(td: timedelta) -> str:
    total_seconds = int(td.total_seconds())
    days, remainder = divmod(total_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes = remainder // 60

    parts = []
    if days > 0:
        parts.append(f"{days} {plural_ru(days, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}")
    if hours > 0:
        parts.append(f"{hours} {plural_ru(hours, ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'))}")
    if minutes > 0:
        parts.append(f"{minutes} {plural_ru(minutes, ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'))}")

    return " ".join(parts) if parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"


@router.callback_query(F.data == "giveaways")
async def giveaways_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    async with SessionLocal() as session:
        giveaways = await get_all_active_giveaways(session)
        await callback.message.edit_text(
            "<b>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <i>—Ä–æ–∑—ã–≥—Ä—ã—à–∏ FastStars!</i></b>\n"
            "<blockquote>–í—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –æ—Ç –±–æ—Ç–∞, –Ω–æ –∏ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!</blockquote>\n\n"
            "üéüÔ∏è –ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ –≤—ã –∫—É–ø–∏—Ç–µ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑üéÅ\n"
            "<blockquote>üí¨ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!</blockquote>\n"
            "–£–¥–∞—á–∏!ü´Ç",
            parse_mode="HTML",
            reply_markup=giveaways_keyboard(giveaways),
        )


async def show_giveaway_info(
    message: types.Message, giveaway_id: int, telegram_id: int
) -> None:
    async with SessionLocal() as session:
        giveaway = await get_giveaway_by_id(session, giveaway_id)
        tickets = await get_tickets_for_giveaway(session, giveaway.id)
        user = await get_user_by_telegram_id(session, telegram_id)
        tickets_bought = await get_tickets_per_user(session, giveaway.id, user.id)
        end = giveaway.end_time.astimezone(kyiv_tz).strftime("%d.%m.%Y %H:%M")
        prizes = generate_prizes(giveaway.num_of_winners, giveaway.prize_pool)

    text = (
        f"<b>üéÅ –†–æ–∑—ã–≥—Ä—ã—à {giveaway.prize_pool}‚≠êÔ∏è –Ω–∞ {giveaway.num_of_winners} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéâ</b>\n"
        "<blockquote>–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–π —á–∞—Å—Ç—å –ø—Ä–∏–∑–æ–≤–æ–≥–æ —Ñ–æ–Ω–¥–∞!</blockquote>\n\n"
        f"<b>–ö—É–ø–∏ –±–∏–ª–µ—Ç –≤—Å–µ–≥–æ –∑–∞ 1‚≠ê –∏ –ø–æ–ª—É—á–∏ —à–∞–Ω—Å —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ {giveaway.num_of_winners} —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤!üèÜ</b>\n"
        "<blockquote>‚ùóÔ∏è–ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!üî•</blockquote>\n\n"
        "<b>üìå –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:</b>\n"
        "‚Ä¢ 1 –±–∏–ª–µ—Ç = 1‚≠ê\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
        f"‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî {giveaway.num_of_winners} —á–µ–ª–æ–≤–µ–∫\n"
        f"‚Ä¢ –ò—Ç–æ–≥–∏ ‚Äî {end}\n"
        "‚Ä¢ –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æü´°\n\n"
        "<b>üèÜ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤</b>:\n"
    )

    last_amount = None
    range_start = None

    for i in range(1, giveaway.num_of_winners + 1):
        reward = prizes[i]
        if reward != last_amount:
            if range_start and range_start != i - 1:
                text += f"{range_start}‚Äì{i - 1} –º–µ—Å—Ç–∞ ‚Äî –ø–æ {last_amount} ‚≠ê\n"
            elif range_start:
                place = (
                    "–º–µ—Å—Ç–æ" if range_start > 3 else ["ü•á", "ü•à", "ü•â"][range_start - 1]
                )
                text += f"{place if range_start <= 3 else f'{range_start} –º–µ—Å—Ç–æ'} ‚Äî {last_amount} ‚≠ê\n"
            range_start = i
            last_amount = reward

    if range_start:
        if range_start != giveaway.num_of_winners:
            text += (
                f"{range_start}‚Äì{giveaway.num_of_winners} –º–µ—Å—Ç–∞ ‚Äî –ø–æ {last_amount} ‚≠ê\n"
            )
        else:
            place = "–º–µ—Å—Ç–æ" if range_start > 3 else ["ü•á", "ü•à", "ü•â"][range_start - 1]
            text += f"{place if range_start <= 3 else f'{range_start} –º–µ—Å—Ç–æ'} ‚Äî {last_amount} ‚≠ê\n"

    text += (
        "\nüß† –í—Å–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –±–æ—Ç–æ–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º\n"
        "‚≠ê –í—Å–µ –ø—Ä–∏–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Åü§ù\n"
        "üì¢ –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ü´°\n\n"
    )

    unique_users = len(set(ticket.user_id for ticket in tickets))
    remaining_time = format_timedelta_ru(giveaway.end_time - datetime.now(kyiv_tz))

    text += "<blockquote>‚ú® –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî —É—á–∞—Å—Ç–≤—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"

    if tickets_bought == 0:
        text += "üéü –í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"
    else:
        text += f"üéü –£ —Ç–µ–±—è —É–∂–µ: <b>{tickets_bought} –±–∏–ª–µ—Ç(-–æ–≤)</b>"

    if giveaway.channel_link:
        text += f"\n\n<b>–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –¥–∞–Ω–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞ –∏ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç: {giveaway.channel_link}</b>\n"

    text += (
        f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{unique_users}</b>\n"
        f"‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{remaining_time}</b></blockquote>"
        "\n\n<b>üõí –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∏–∂–µ:üëáüèª</b>"
    )

    await message.answer(
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=giveaway_tickets_keyboard(giveaway),
    )


@router.callback_query(F.data.startswith("view_giveaway_"))
async def view_giveaway_callback(callback: types.CallbackQuery) -> None:
    telegram_id = callback.from_user.id
    giveaway_id = int(callback.data.split("_")[2])
    await show_giveaway_info(callback.message, giveaway_id, telegram_id)


@router.callback_query(F.data.startswith("buy_tickets_"))
async def buy_giveaway_ticket(callback: types.CallbackQuery):
    amount = int(callback.data.split("_")[-1])
    giveaway_id = int(callback.data.split("_")[2])
    telegram_id = callback.from_user.id
    async with SessionLocal() as session:
        giveaway = await get_giveaway_by_id(session, giveaway_id)
        channel_identifier = None

        if giveaway.channel_link:
            channel_username = giveaway.channel_link.rstrip("/").split("/")[-1]
            if not channel_username.startswith("+"):
                channel_identifier = f"@{channel_username}"

        if not channel_identifier and giveaway.username:
            if giveaway.username.startswith("@"):
                channel_identifier = giveaway.username
            elif giveaway.username.startswith("-"):
                channel_identifier = int(giveaway.username)

    if channel_identifier:
        try:
            chat = await callback.bot.get_chat_member(channel_identifier, telegram_id)
            if chat.status in ("left", "kicked"):
                await callback.answer(
                    "–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –≤ —É—Å–ª–æ–≤–∏—è—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                    show_alert=True,
                )
                return
        except TelegramBadRequest:
            await callback.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True
            )
            return
        except TelegramForbiddenError:
            await callback.answer(
                "–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True
            )
            return

    invoice = await callback.bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–ë–∏–ª–µ—Ç(-—ã) –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à",
        description="–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ",
        payload=f"giveaway_tickets_{giveaway_id}",
        provider_token="",
        currency="XTR",
        prices=[types.LabeledPrice(label="–ë–∏–ª–µ—Ç—ã", amount=amount)],
        start_parameter=f"giveaway_tickets_{giveaway_id}",
    )

    async def delete_invoice_later():
        await asyncio.sleep(15)
        try:
            await callback.bot.delete_message(callback.from_user.id, invoice.message_id)
        except Exception:
            pass

    asyncio.create_task(delete_invoice_later())


@router.pre_checkout_query(lambda q: True)
async def pre_checkout_query_handler(
    pre_checkout_query: types.PreCheckoutQuery,
) -> None:
    await pre_checkout_query.bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
    )


@router.message(
    F.successful_payment,
    F.successful_payment.invoice_payload.startswith("giveaway_tickets_"),
)
async def successful_giveaway_payment(message: types.Message) -> None:
    amount = int(message.successful_payment.total_amount)
    giveaway_id = int(message.successful_payment.invoice_payload.split("_")[2])
    telegram_id = message.from_user.id

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        giveaway = await get_giveaway_by_id(session, giveaway_id)
        await buy_tickets_for_giveaway(session, giveaway.id, user.id, amount)

    message = await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {amount} –±–∏–ª–µ—Ç(-–æ–≤)! ‚úÖ")

    async def delete_message_later():
        await asyncio.sleep(10)
        try:
            await message.bot.delete_message(message.from_user.id, message.message_id)
        except Exception:
            pass

    asyncio.create_task(delete_message_later())

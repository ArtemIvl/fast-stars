from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from db.session import SessionLocal
from aiogram.exceptions import TelegramBadRequest
from utils.task_requests import is_task_completed, get_tasks_by_ids, get_all_tasks, is_user_subscribed_to_task, complete_task
from utils.user_requests import get_user_by_telegram_id
from keyboards.tasks_keyboard import tasks_keyboard, no_tasks_keyboard

router = Router()

def register_task_handlers(dp) -> None:
    dp.include_router(router)

@router.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    telegram_id = callback.from_user.id
    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        tasks = await get_all_tasks(session)
        bot = callback.bot

        tasks_to_show = []
        for task in tasks:
            completed = await is_task_completed(session, user.id, task.id)
            subscribed = await is_user_subscribed_to_task(bot, telegram_id, task) if task.requires_subscription else None

            if task.requires_subscription:
                if not subscribed:
                    tasks_to_show.append(task)
            else:
                if not completed:
                    tasks_to_show.append(task)

        if not tasks_to_show:
            await callback.message.edit_text(
                "<b>üìå –í–∫–ª–∞–¥–∫–∞ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª</b>\n"
                "–í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –û–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç 30 –º–∏–Ω—É—Ç –∏ –¥–æ–ª—å—à–µ.\n\n"
                "üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞ –ø–æ—á–∞—â–µ!\n\n"
                "üíé –ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö</b> ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ <b>VIP-–ø–∞–∫–µ—Ç</b> –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Üí ¬´VIP-–ø–∞–∫–µ—Ç¬ª</b>.",
                parse_mode="HTML",
                reply_markup=no_tasks_keyboard()
                )
            return
        
        task_ids = [task.id for task in tasks_to_show]
        await state.update_data(tasks_to_show_ids=task_ids)

        try:
            await callback.message.edit_text(
                "<b>üìå –í–∫–ª–∞–¥–∫–∞ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª</b>\n"
                "–í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –û–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç 30 –º–∏–Ω—É—Ç –∏ –¥–æ–ª—å—à–µ.\n\n"
                "üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞ –ø–æ—á–∞—â–µ!\n\n"
                "üíé –ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö</b> ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ <b>VIP-–ø–∞–∫–µ—Ç</b> –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Üí ¬´VIP-–ø–∞–∫–µ—Ç¬ª</b>.",
                parse_mode="HTML", 
                reply_markup=tasks_keyboard(tasks_to_show)
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

@router.callback_query(F.data == "check_tasks")
async def check_tasks_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    telegram_id = callback.from_user.id
    bot = callback.bot

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        data = await state.get_data()
        task_ids = data.get("tasks_to_show_ids", [])
        tasks = await get_tasks_by_ids(session, task_ids)

        completed_now = []
        already_rewarded = []
        tasks_to_show = []
        has_visible_required_task = any(t.requires_subscription for t in tasks)

        for task in tasks:
            completed = await is_task_completed(session, user.id, task.id)
            subscribed = await is_user_subscribed_to_task(bot, telegram_id, task) if task.requires_subscription else None

            if task.requires_subscription:
                if subscribed and not completed:
                    # –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ ‚Äî —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
                    await complete_task(session, user, task)
                    completed_now.append(task)
                elif subscribed and completed:
                    # —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω—É–∂–Ω–∞ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    already_rewarded.append(task)
                else:
                    # –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    tasks_to_show.append(task)
            else:
                # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
                if not completed:
                    tasks_to_show.append(task)

         # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
        if not has_visible_required_task:
            for task in tasks_to_show:
                completed = await is_task_completed(session, user.id, task.id)
                if not completed:
                    await complete_task(session, user, task)
                    completed_now.append(task)
            tasks_to_show = [t for t in tasks_to_show if t not in completed_now]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ø-–∞–ø–∞
        text_parts = []
        if completed_now:
            text = "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
            text += "\n".join(f"‚Ä¢ {t.title} ‚Äî +{t.reward:.2f} ‚≠ê" for t in completed_now)
            text_parts.append(text)

        if already_rewarded:
            text = "‚ö†Ô∏è –ó–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Ä–∞–Ω–µ–µ:\n"
            text += "\n".join(f"‚Ä¢ {t.title}" for t in already_rewarded)
            text_parts.append(text)

        if not text_parts:
            await callback.answer("‚ùóÔ∏è –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è.", show_alert=True)
        else:
            await callback.answer("\n\n".join(text_parts), show_alert=True)

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞
        if not tasks_to_show:
            await callback.message.edit_text(
                "<b>üìå –í–∫–ª–∞–¥–∫–∞ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª</b>\n"
                "–í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –û–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç 30 –º–∏–Ω—É—Ç –∏ –¥–æ–ª—å—à–µ.\n\n"
                "üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞ –ø–æ—á–∞—â–µ!\n\n"
                "üíé –ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö</b> ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ <b>VIP-–ø–∞–∫–µ—Ç</b> –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Üí ¬´VIP-–ø–∞–∫–µ—Ç¬ª</b>.",
                parse_mode="HTML",
                reply_markup=no_tasks_keyboard()
            )
            await state.update_data(tasks_to_show_ids=[])
        else:
            await state.update_data(tasks_to_show_ids=[t.id for t in tasks_to_show])
            try:
                await callback.message.edit_text(
                    "<b>üìå –í–∫–ª–∞–¥–∫–∞ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª</b>\n"
                    "–í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –û–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç 30 –º–∏–Ω—É—Ç –∏ –¥–æ–ª—å—à–µ.\n\n"
                    "üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞ –ø–æ—á–∞—â–µ!\n\n"
                    "üíé –ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö</b> ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ <b>VIP-–ø–∞–∫–µ—Ç</b> –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Üí ¬´VIP-–ø–∞–∫–µ—Ç¬ª</b>.",
                    parse_mode="HTML",
                    reply_markup=tasks_keyboard(tasks_to_show)
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    return
                raise
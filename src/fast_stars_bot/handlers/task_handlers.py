from aiogram import F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from db.session import SessionLocal
from keyboards.tasks_keyboard import no_tasks_keyboard, tasks_keyboard
from utils.task_requests import (
    complete_task,
    get_all_tasks,
    get_tasks_by_ids,
    is_task_completed,
    is_user_subscribed_to_task,
)
from utils.user_requests import get_user_by_telegram_id

router = Router()


def register_task_handlers(dp) -> None:
    dp.include_router(router)


TASKS_HEADER = (
    "<b>üìå –í–∫–ª–∞–¥–∫–∞ ¬´–ó–∞–¥–∞–Ω–∏—è¬ª</b>\n"
    "–í —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. –û–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç 30 –º–∏–Ω—É—Ç –∏ –¥–æ–ª—å—à–µ.\n\n"
    "üîî –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ‚Äî –∑–∞—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞ –ø–æ—á–∞—â–µ!\n\n"
    "üíé –ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö</b> ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ <b>VIP-–ø–∞–∫–µ—Ç</b> –≤ —Ä–∞–∑–¥–µ–ª–µ <b>¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Üí ¬´VIP-–ø–∞–∫–µ—Ç¬ª</b>."
)


async def send_tasks_message(
    callback: types.CallbackQuery, tasks, state: FSMContext
) -> None:
    if not tasks:
        await callback.message.edit_text(
            TASKS_HEADER, parse_mode="HTML", reply_markup=no_tasks_keyboard()
        )
        await state.update_data(tasks_to_show_ids=[])
        return

    await state.update_data(tasks_to_show_ids=[task.id for task in tasks])
    try:
        await callback.message.edit_text(
            TASKS_HEADER, parse_mode="HTML", reply_markup=tasks_keyboard(tasks)
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


@router.callback_query(F.data == "tasks")
async def tasks_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    telegram_id = callback.from_user.id
    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        tasks = await get_all_tasks(session)

        tasks_to_show = []
        for task in tasks:
            completed = await is_task_completed(session, user.id, task.id)
            if task.requires_subscription:
                subscribed = await is_user_subscribed_to_task(
                    callback.bot, telegram_id, task
                )
                if not subscribed:
                    tasks_to_show.append(task)
            elif not completed:
                tasks_to_show.append(task)

        await send_tasks_message(callback, tasks_to_show, state)


@router.callback_query(F.data == "check_tasks")
async def check_tasks_callback(
    callback: types.CallbackQuery, state: FSMContext
) -> None:
    telegram_id = callback.from_user.id

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        data = await state.get_data()
        task_ids = data.get("tasks_to_show_ids", [])
        tasks = await get_tasks_by_ids(session, task_ids)

        completed_now, already_rewarded, tasks_to_show = [], [], []
        has_visible_required_task = any(task.requires_subscription for task in tasks)

        for task in tasks:
            completed = await is_task_completed(session, user.id, task.id)
            subscribed = (
                await is_user_subscribed_to_task(callback.bot, telegram_id, task)
                if task.requires_subscription
                else None
            )

            if task.requires_subscription:
                if subscribed and not completed:
                    # –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ ‚Äî —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
                    await complete_task(session, user, task)
                    completed_now.append(task)
                elif subscribed and completed:
                    # —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –Ω—É–∂–Ω–∞ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    already_rewarded.append(task)
                else:
                    # –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                    tasks_to_show.append(task)
            else:
                # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
                if not completed:
                    tasks_to_show.append(task)

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
        if not has_visible_required_task:
            for task in tasks_to_show:
                completed = await is_task_completed(session, user.id, task.id)
                if not completed:
                    await complete_task(session, user, task)
                    completed_now.append(task)
            tasks_to_show = [t for t in tasks_to_show if t not in completed_now]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ø-–∞–ø–∞
        messages = []
        if completed_now:
            msg = "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è:\n" + "\n".join(
                f"‚Ä¢ {t.title} ‚Äî +{t.reward:.2f} ‚≠ê" for t in completed_now
            )
            messages.append(msg)
        if already_rewarded:
            msg = "‚ö†Ô∏è –ó–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Ä–∞–Ω–µ–µ:\n" + "\n".join(
                f"‚Ä¢ {t.title}" for t in already_rewarded
            )
            messages.append(msg)

        if messages:
            await callback.answer("\n\n".join(messages), show_alert=True)
        else:
            await callback.answer("‚ùóÔ∏è –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è.", show_alert=True)

        await send_tasks_message(callback, tasks_to_show, state)

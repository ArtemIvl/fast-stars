from aiogram import Router, F, types
import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.session import SessionLocal
from utils.user_requests import get_user_by_telegram_id, get_all_admins, has_previous_withdrawals
from utils.withdrawal_requests import create_withdrawal_request, get_withdrawal_by_id
from decimal import Decimal, InvalidOperation
from keyboards.withdrawal_keyboard import withdrawal_keyboard, back_to_withdrawal_keyboard
from keyboards.profile_keyboard import back_to_profile_keyboard
from keyboards.admin_keyboards import withdraw_info_keyboard
from handlers.admin_handlers.withdraw_admin import generate_detailed_withdraw_text

router = Router()

def register_withdrawal_handlers(dp) -> None:
    dp.include_router(router)

class WithdrawalStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_swap_amount = State()
    waiting_for_ton_address = State()

def calculate_commission(amount: Decimal) -> int:
    if amount >= 150:
        return 0
    elif amount >= 100:
        return 3
    elif amount >= 50:
        return 5
    return -1

@router.callback_query(F.data == "withdraw")
async def withdrawal_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await callback.message.edit_text(
        f"<b>üí∞ –í—ã–≤–æ–¥ –∏ –æ–±–º–µ–Ω –∑–≤—ë–∑–¥</b>\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ:\n"
        f"üîπ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã –Ω–∞ —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫ ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 50.0‚≠êÔ∏è.\n"
        f"üîπ –û–±–º–µ–Ω—è—Ç—å –∑–≤—ë–∑–¥—ã –Ω–∞ TON ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ 150.0‚≠êÔ∏è.\n"
        f"‚ôæÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–≤—ë–∑–¥ –≤ TON –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –∫—É—Ä—Å—É –Ω–∞ —Å–∞–π—Ç–µ <b>Fragment</b>.\n"
        f"<blockquote><b>‚ùóÔ∏è–ü–µ—Ä–≤—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π.</b>\n"
        f"–î–∞–ª—å–Ω–µ–π—à–∏–µ –≤—ã–≤–æ–¥—ã:\n"
        f"‚ñ™Ô∏è –æ—Ç 50 –¥–æ 99.9‚≠êÔ∏è ‚Äî –∫–æ–º–∏—Å—Å–∏—è 5 Telegram Stars\n"
        f"‚ñ™Ô∏è –æ—Ç 100 –¥–æ 149.9‚≠êÔ∏è ‚Äî –∫–æ–º–∏—Å—Å–∏—è 3 Telegram Stars\n"
        f"‚ñ™Ô∏è –æ—Ç 150‚≠êÔ∏è ‚Äî <b>–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏</b>\n\n"
        f"üí° –ö–æ–º–∏—Å—Å–∏—è —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ —Å –±–∞–ª–∞–Ω—Å–∞ Telegram Stars</b>, –∞ –Ω–µ —Å –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥.</blockquote>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ! üëáüèª",
        parse_mode="HTML",
        reply_markup=withdrawal_keyboard()
    )

@router.callback_query(F.data == "withdraw_stars")
async def withdraw_stars_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    telegram_id = callback.from_user.id
    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        if user.stars < 50:
            await callback.answer(
                "–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 50.0 ‚≠êÔ∏è",
                show_alert=True,
            )
            return
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–æ—Ç 50.0 ‚≠êÔ∏è):",
            reply_markup=back_to_withdrawal_keyboard()
        )
        await state.set_state(WithdrawalStates.waiting_for_amount)

@router.callback_query(F.data == "withdraw_ton")
async def withdraw_ton_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    telegram_id = callback.from_user.id
    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session,telegram_id)
        if user.stars < 150:
            await callback.answer(
                "–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç 150.0 ‚≠êÔ∏è",
                show_alert=True,
            )
            return
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–æ—Ç 150.0 ‚≠êÔ∏è):",
            reply_markup=back_to_withdrawal_keyboard()
        )
        await state.set_state(WithdrawalStates.waiting_for_swap_amount)

@router.message(WithdrawalStates.waiting_for_swap_amount)
async def handle_swap_amount(message: types.Message, state: FSMContext) -> None:
    try:
        amount = Decimal(message.text)
        if amount < 150:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 150.0 ‚≠êÔ∏è.")
            return
        await state.update_data(swap_amount=message.text)
        await state.set_state(WithdrawalStates.waiting_for_ton_address)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å TON-–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:",
            reply_markup=back_to_withdrawal_keyboard()
        )
    except (ValueError, InvalidOperation):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.")

@router.message(WithdrawalStates.waiting_for_ton_address)
async def handle_ton_address(message: types.Message, state: FSMContext) -> None:
    try:
        ton_address = str(message.text)
        # add checks for valid ton address format
        async with SessionLocal() as session:
            telegram_id = message.from_user.id
            user = await get_user_by_telegram_id(session, telegram_id)
            data = await state.get_data()
            amount = Decimal(data.get("swap_amount"))
            if user.stars < amount:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                return
            
            withdrawal_id = await create_withdrawal_request(session, user.id, amount, ton_address)
            withdrawal = await get_withdrawal_by_id(session, withdrawal_id)
            admins = await get_all_admins(session)
            detailed_text = await generate_detailed_withdraw_text(session, withdrawal, user)
            for admin in admins:
                await message.bot.send_message(
                    admin.telegram_id,
                    detailed_text,
                    parse_mode="HTML",
                    reply_markup=withdraw_info_keyboard(withdrawal_id, user.id),
                )
        
        await message.answer(
            "<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>24 —á–∞—Å–æ–≤</b>ü§ù",
            parse_mode="HTML",
            reply_markup=back_to_profile_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞.")


@router.message(F.text, WithdrawalStates.waiting_for_amount)
async def handle_withdrawal_amount(message: types.Message, state: FSMContext) -> None:
    try:
        amount = Decimal(message.text)
        async with SessionLocal() as session:
            telegram_id = message.from_user.id
            user = await get_user_by_telegram_id(session, telegram_id)
            first_time = not await has_previous_withdrawals(session, user.id)

        commission = 0 if first_time else calculate_commission(amount)
        if commission == -1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 50.0 ‚≠êÔ∏è.")
            return
        
        if commission > 0:
            await state.update_data({
                "withdraw_amount": str(amount),
                "commission": commission
            })
            await message.answer(
                f"–¢–∞–∫ –∫–∞–∫ –≤—ã —É–∂–µ –Ω–µ –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤—ã–≤–æ–¥–∏—Ç–µ ‚≠êÔ∏è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –æ—Ç 3 –¥–æ 5‚≠êÔ∏èüëáüèª\n"
                f"<blockquote>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—ã–≤–æ–¥ –æ—Ç 150‚≠êÔ∏è ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b>.</blockquote>",
                parse_mode="HTML",
                reply_markup=back_to_withdrawal_keyboard()
            )

            invoice = await message.bot.send_invoice(
                chat_id=message.chat.id,
                title="–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥",
                description=f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥ {amount:.2f}‚≠êÔ∏è",
                payload=f"withdraw_commission:{message.from_user.id}",
                provider_token="",
                currency="XTR", 
                prices=[types.LabeledPrice(label="–ö–æ–º–∏—Å—Å–∏—è", amount=commission)],
                start_parameter="withdraw",
            )

            await state.update_data(invoice_msg_id=invoice.message_id)

            async def delete_invoice_later():
                await asyncio.sleep(15)
                try:
                    await message.bot.delete_message(message.from_user.id, invoice.message_id)
                except Exception:
                    pass
                
            asyncio.create_task(delete_invoice_later())
            return
        async with SessionLocal() as session:
            telegram_id = message.from_user.id
            user = await get_user_by_telegram_id(session, telegram_id)
            if user.stars < amount:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                return
            
            withdrawal_id = await create_withdrawal_request(session, user.id, amount)
            withdrawal = await get_withdrawal_by_id(session, withdrawal_id)
            admins = await get_all_admins(session)
            detailed_text = await generate_detailed_withdraw_text(session, withdrawal, user)
            for admin in admins:
                await message.bot.send_message(
                    admin.telegram_id,
                    detailed_text,
                    parse_mode="HTML",
                    reply_markup=withdraw_info_keyboard(withdrawal_id, user.id),
                )
        
        await message.answer(
            "<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>24 —á–∞—Å–æ–≤</b>ü§ù",
            parse_mode="HTML",
            reply_markup=back_to_profile_keyboard()
        )
        await state.clear()
    except (ValueError, InvalidOperation):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.")


@router.pre_checkout_query(lambda q: True)
async def process_checkout(pre_checkout_query: types.PreCheckoutQuery) -> None:
    await pre_checkout_query.bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True
    )

@router.message(F.successful_payment, F.successful_payment.invoice_payload.startswith("withdraw_commission:"))
async def successful_withdraw_payment(message: types.Message, state: FSMContext) -> None:
    data = await state.get_data()
    amount = Decimal(data["withdraw_amount"])
    telegram_id = message.from_user.id

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        if user.stars < amount:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
            return
        
        withdrawal_id = await create_withdrawal_request(session, user.id, amount)
        withdrawal = await get_withdrawal_by_id(session, withdrawal_id)
        admins = await get_all_admins(session)
        detailed_text = await generate_detailed_withdraw_text(session, withdrawal, user)
        for admin in admins:
            await message.bot.send_message(
                admin.telegram_id,
                detailed_text,
                parse_mode="HTML",
                reply_markup=withdraw_info_keyboard(withdrawal_id, user.id),
            )
    
    await message.answer(
        "<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤—ë–∑–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>24 —á–∞—Å–æ–≤</b>ü§ù",
        parse_mode="HTML",
        reply_markup=back_to_profile_keyboard()
    )
    await state.clear()



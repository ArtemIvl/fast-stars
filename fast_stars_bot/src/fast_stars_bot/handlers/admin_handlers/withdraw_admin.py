from aiogram import F, Router, types
from db.session import SessionLocal
from utils.user_requests import get_user_by_id, get_user_task_completion_percent, get_user_bonus_claim_percent
from db.models.withdrawal import WithdrawalStatus
from utils.withdrawal_requests import get_all_pending_withdrawals, get_withdrawal_by_id, update_withdrawal_status, get_completed_user_withdrawals
from utils.referral_requests import get_referral_stats, get_referrals, get_who_referred
from utils.vip_requests import is_user_vip
from keyboards.admin_keyboards import withdraw_info_keyboard, pending_withdraw_keyboard, back_to_withdrawal_keyboard
from aiogram.exceptions import TelegramForbiddenError
from sqlalchemy.ext.asyncio import AsyncSession
from db.models.user import User
from db.models.withdrawal import Withdrawal
from decimal import Decimal

withdraw_admin_router = Router()

status_map = {
    WithdrawalStatus.PENDING: "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
    WithdrawalStatus.APPROVED: "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
    WithdrawalStatus.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
}

async def generate_detailed_withdraw_text(
    session: AsyncSession,
    withdrawal: Withdrawal,
    user: User
) -> str:
    is_vip = await is_user_vip(session, user.id)
    withdrawals = await get_completed_user_withdrawals(session, user.id)
    referral_stats = await get_referral_stats(session, user.id)
    user_bonus_claim_percent = await get_user_bonus_claim_percent(session, user.id)
    user_task_completion_percent = await get_user_task_completion_percent(session, user.id)
    referrals = await get_referrals(session, user.id)
    referrer = await get_who_referred(session, user.id)

    status_text = status_map.get(withdrawal.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    text = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–≤–æ–¥–µ:</b>\n\n"
        f"–ó–∞—è–≤–∫–∞ {withdrawal.id} –æ—Ç @{user.username} ({user.telegram_id}) {user.reg_date} –Ω–∞ {withdrawal.stars}‚≠ê\n"
        f"VIP? {'–î–∞' if is_vip else '–ù–µ—Ç'}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user.stars:.2f}‚≠ê\n"
        f"–ë–æ–Ω—É—Å –¥–Ω—è: {user_bonus_claim_percent}%\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π: {user_task_completion_percent}%\n"
    )

    if withdrawal.ton_address:
        text += f"TON Address: <code>{withdrawal.ton_address}</code>\n"

    text += f"\n<b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"

    if referrals:
        sorted_referrals = sorted(referrals, key=lambda x: x.reg_date, reverse=True)[:10]
        for idx, user in enumerate(sorted_referrals, start=1):
            username = f"@{user.username}" if user.username else f"ID:{user.telegram_id}"
            reg_date = f"{user.reg_date}"
            text += f"{idx}. {username} - {reg_date}\n"
        text += (
            f"\nüë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats['referral_count']}\n"
            f"‚Ü™Ô∏è –ò–º–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats['nested_referrals']}\n"
            f"üìà –°–±–æ—Ä –±–æ–Ω—É—Å–∞ –¥–Ω—è: {referral_stats['bonus_percent']}%\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π: {referral_stats['task_percent']}%\n"
            f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {referral_stats['banned_count']}\n\n"
            f"<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã:</b>\n\n"
        )
    else:
        text += (
            f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n"
            f"<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã:</b>\n"
        )

    if withdrawals:
        approved = [w for w in withdrawals if w.status == WithdrawalStatus.APPROVED]
        rejected = [w for w in withdrawals if w.status == WithdrawalStatus.REJECTED]
        total_withdrawn = sum(w.stars for w in approved) if approved else Decimal("0.00")

        text += (
            f"–ó–∞—è–≤–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–æ: {len(approved)}\n"
            f"–ó–∞—è–≤–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(rejected)}\n"
            f"–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: {total_withdrawn:.2f}‚≠ê\n\n"
        )
    else:
        text += "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤.\n\n"

    if referrer:
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω @{referrer.username} (ID: {referrer.telegram_id})"
    else:
        text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω."

    text += f"\n\n–°—Ç–∞—Ç—É—Å: {status_text}"

    return text

@withdraw_admin_router.callback_query(F.data == "manage_withdrawals")
async def manage_withdrawals_callback(callback: types.CallbackQuery) -> None:
    async with SessionLocal() as session:
        withdrawals = await get_all_pending_withdrawals(session)
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –≤—ã–≤–æ–¥–æ–≤:", reply_markup=pending_withdraw_keyboard(withdrawals, page=1)
        )

@withdraw_admin_router.callback_query(F.data.startswith("withdraw_page_"))
async def handle_withdraw_page(callback: types.CallbackQuery) -> None:
    page = int(callback.data.split("_")[-1])
    async with SessionLocal() as session:
        withdrawals = await get_all_pending_withdrawals(session)
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –≤—ã–≤–æ–¥–æ–≤:",
            reply_markup=pending_withdraw_keyboard(withdrawals, page=page)
        )
        await callback.answer()

@withdraw_admin_router.callback_query(F.data.startswith("withdraw_info_"))
async def withdraw_info_callback(callback: types.CallbackQuery) -> None:
    withdrawal_id = int(callback.data.split("_")[2])
    async with SessionLocal() as session:
        withdrawal = await get_withdrawal_by_id(session, withdrawal_id)
        user = await get_user_by_id(session, withdrawal.user_id)
        text = await generate_detailed_withdraw_text(session, withdrawal, user)

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=withdraw_info_keyboard(withdrawal.id, user.id),
        )

@withdraw_admin_router.callback_query(F.data.startswith("confirm_withdrawal_"))
async def confirm_withdrawal_callback(callback: types.CallbackQuery) -> None:
    withdrawal_id = int(callback.data.split("_")[2])
    async with SessionLocal() as session:
        await update_withdrawal_status(session, withdrawal_id, WithdrawalStatus.APPROVED)
        withdrawal = await get_withdrawal_by_id(session, withdrawal_id)
        user = await get_user_by_id(session, withdrawal.user_id)

        try:
            await callback.bot.send_message(
                chat_id=user.telegram_id,
                text=(
                    "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!ü´°</b>\n\n"
                    "üí´ –°–∫–æ—Ä–æ –≤–∞—à–∏ –∑–≤—ë–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à Telegram-–∞–∫–∫–∞—É–Ω—Ç.\n\n"
                    "–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–≤—ë–∑–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏. "
                    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏–º, —á—Ç–æ –Ω–∞—à –±–æ—Ç –ø–ª–∞—Ç–∏—Ç! üöÄü´Ç"
                ),
                parse_mode="HTML"
            )
        except TelegramForbiddenError:
            pass

        try:
            await callback.bot.send_message(
                chat_id=-1002436472086,
                text=f"@{user.username} –≤—ã–≤–µ–ª(-–∞) {withdrawal.stars} ‚≠êÔ∏è"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

        await callback.answer("–í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
    withdrawals = await get_all_pending_withdrawals(session)
    updated_text = await generate_detailed_withdraw_text(session, withdrawal, user)
    await callback.message.edit_text(updated_text, parse_mode="HTML", reply_markup=None)
    await callback.message.answer(
        "–°–ø–∏—Å–æ–∫ –≤—ã–≤–æ–¥–æ–≤:", reply_markup=pending_withdraw_keyboard(withdrawals, page=1)
    )

@withdraw_admin_router.callback_query(F.data.startswith("reject_withdrawal_"))
async def decline_withdrawal_callback(callback: types.CallbackQuery) -> None:
    withdrawal_id = int(callback.data.split("_")[2])
    async with SessionLocal() as session:
        await update_withdrawal_status(session, withdrawal_id, WithdrawalStatus.REJECTED)
        withdrawal = await get_withdrawal_by_id(session, withdrawal_id)
        user = await get_user_by_id(session, withdrawal.user_id)

        try:
            await callback.bot.send_message(
                chat_id=user.telegram_id,
                text=(
                    "‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.</b>\n\n"
                    "üî∏ <b>–ù–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –∑–∞:</b>\n"
                    "‚Äî –Ω–∞–∫—Ä—É—Ç–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤,\n"
                    "‚Äî –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,\n"
                    "‚Äî –±–æ—Ç–æ–≤ –∏ —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã,\n"
                    "‚Äî –≤—Ç–æ—Ä—ã–µ –∏ —Ç—Ä–µ—Ç—å–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n\n"
                    "üë§ –í –Ω–∞—à–µ–º –±–æ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ñ–∞—Ä–º–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ ‚Äî –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.\n\n"
                    "üìä –¢–∞–∫–∂–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –Ω–æ—Ä–º–µ!\n\n"
                    "üìå –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ—Å—Ç–∞–º–∏ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞, "
                    "—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –≤ –±—É–¥—É—â–µ–ºüëáüèª\n\n"
                    "https://t.me/STARS_FAST_go"
                ),
                disable_web_page_preview=True,
                parse_mode="HTML"
            )
        except TelegramForbiddenError:
            pass

        await callback.answer("–í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω!", show_alert=True)
        withdrawals = await get_all_pending_withdrawals(session)
    updated_text = await generate_detailed_withdraw_text(session, withdrawal, user)
    await callback.message.edit_text(updated_text, parse_mode="HTML", reply_markup=None)
    await callback.message.answer(
        "–°–ø–∏—Å–æ–∫ –≤—ã–≤–æ–¥–æ–≤:", reply_markup=pending_withdraw_keyboard(withdrawals, page=1)
    )

@withdraw_admin_router.callback_query(F.data.startswith("all_withdrawals_"))
async def user_withdrawals_callback(callback: types.CallbackQuery) -> None:
    user_id = int(callback.data.split("_")[2])
    withdrawal_id = int(callback.data.split("_")[3])

    async with SessionLocal() as session:
        withdrawals = await get_completed_user_withdrawals(session, user_id)
        if not withdrawals:
            await callback.message.edit_text("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤.", reply_markup=back_to_withdrawal_keyboard(withdrawal_id))
            return
        
        text = "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        for withdrawal in withdrawals:
            status_text = status_map.get(withdrawal.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += (
                f"ID: {withdrawal.id}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"–°—É–º–º–∞: {withdrawal.stars}‚≠ê\n"
            )

            if withdrawal.ton_address:
                text += f"–í—ã–≤–æ–¥ –≤ TON? –î–∞\n"
            else:
                text += f"–í—ã–≤–æ–¥ –≤ TON? –ù–µ—Ç\n"
            text+= f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–ª–Ω–∞: {withdrawal.created_at}\n\n"
        
    await callback.message.edit_text(
        text,
        reply_markup=back_to_withdrawal_keyboard(withdrawal_id),
    )
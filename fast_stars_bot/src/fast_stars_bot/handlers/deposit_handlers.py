from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.session import SessionLocal
from utils.user_requests import get_user_by_telegram_id, get_all_admins
from keyboards.deposit_keyboard import deposit_keyboard, confirm_payment_keyboard
from decimal import Decimal
import random
from config.settings import settings
from utils.tonapi import check_deposit_received
from utils.deposit_requests import create_deposit, confirm_deposit, get_pending_deposit

router = Router()

def register_deposit_handlers(dp) -> None:
    dp.include_router(router)

class DepositState(StatesGroup):
    waiting_for_payment_confirmation = State()

TON_WALLET_ADDRESS = settings.TON_WALLET_ADDRESS

DEPOSIT_OPTIONS = {
    "50": 0.4,
    "100": 0.75,
    "555": 4.0,
}

@router.callback_query(F.data == "deposit")
async def deposit_callback(callback: types.CallbackQuery) -> None:
    await callback.message.edit_text(
        f"<b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å <b>–∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å</b> –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏ —Ç–µ–º —Å–∞–º—ã–º <b>–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.</b>\n\n"
        f"üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
        f"üîπ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ <b>TON</b>.\n\n"
        f"üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
        parse_mode="HTML",
        reply_markup=deposit_keyboard()
    )

@router.callback_query(F.data.startswith("deposit_"))
async def handle_deposit_selection(callback: types.CallbackQuery, state: FSMContext) -> None:
    amount = int(Decimal(callback.data.split("_")[1]))
    ton_amount = DEPOSIT_OPTIONS.get(str(amount))
    if not ton_amount:
        await callback.answer("–û—à–∏–±–∫–∞ —Å—É–º–º—ã.", show_alert=True)
        return
    
    comment_code = random.randint(1000, 9999)

    await state.update_data(stars=amount, ton=ton_amount, comment=comment_code)
    await state.set_state(DepositState.waiting_for_payment_confirmation)

    text = (
        f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount}‚≠ê –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{ton_amount} TON</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
        f"<code>{TON_WALLET_ADDRESS}</code>\n\n"
        f"üîπ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <code>{comment_code}</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Äú‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª‚Äù."
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=confirm_payment_keyboard())

@router.callback_query(DepositState.waiting_for_payment_confirmation, F.data == "confirm_deposit")
async def confirm_deposit_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    stars = data.get("stars")
    ton = Decimal(data.get("ton"))
    comment = str(data.get("comment"))
    telegram_id = callback.from_user.id

    await callback.message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤...")

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
        existing_deposit = await get_pending_deposit(session, comment, user.id)
        if not existing_deposit:
            await create_deposit(session, user.id, stars, ton, comment)

    ton_received = await check_deposit_received(
        expected_amount=ton,
        expected_comment=comment,
    )

    async with SessionLocal() as session:
        if ton_received:
            deposit = await confirm_deposit(session, user.id, comment)
            if deposit:
                await callback.message.answer(
                    f"‚úÖ –ü–æ—Å—Ç—É–ø–∏–ª–æ {ton_received}, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                    f"{stars}‚≠êÔ∏è –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
                )

                admins = await get_all_admins(session)
                for admin in admins:
                    await callback.bot.send_message(
                        admin.telegram_id,
                        f"üí∞ –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '‚Äî'}\n"
                        f"üÜî Telegram ID: {user.telegram_id}\n"
                        f"üíµ –°—É–º–º–∞: {deposit.ton} TON ({deposit.stars}‚≠ê)\n"
                        f"üìé –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{deposit.comment}</code>",
                        parse_mode="HTML"
                    )
                    await state.clear()
            else:
                await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                await state.clear()
        else:
            await callback.message.answer("‚ùå –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", reply_markup=confirm_payment_keyboard())

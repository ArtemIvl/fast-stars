from aiogram import F, Router, types
from db.session import SessionLocal
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from decimal import Decimal
from keyboards.x2game_keyboard import x2game_keyboard, play_x2game_again
from keyboards.channels_keyboard import back_to_menu_keyboard
from utils.user_requests import get_user_by_telegram_id
from utils.x2game_requests import save_x2game_results
import random
from utils.game_settings_requests import get_game_setting

router = Router()

class X2GameState(StatesGroup):
    waiting_for_bet = State()
    waiting_for_choice = State()

def register_x2game_handlers(dp) -> None:
    dp.include_router(router)


@router.callback_query(F.data == "x2_game")
async def x2_game_callback(callback: types.CallbackQuery, state: FSMContext) -> None:
    telegram_id = callback.from_user.id
    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)
    await state.set_state(X2GameState.waiting_for_bet)
    await callback.message.edit_text(
        "üïπÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, –≥–¥–µ —É–¥–∞—á–∞ —Ä–µ—à–∞–µ—Ç –≤—Å—ë!\n\n"
        "üîπ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?\n\n"
        "1. –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 ‚≠êÔ∏è\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —á—ë—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n"
        "3. –£–≥–∞–¥–∞–ª–∏? –í–∞—à –≤—ã–∏–≥—Ä—ã—à ‚Äî √ó2 –æ—Ç —Å—Ç–∞–≤–∫–∏!\n"
        "4. –û—à–∏–±–ª–∏—Å—å? –°—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–∞–µ—Ç.\n\n"
        "üïπÔ∏è –ò—Å–ø—ã—Ç–∞–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—Éü™Ñ\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.stars} ‚≠êÔ∏è\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥–æ—á–µ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å: üëáüèª",
        reply_markup=back_to_menu_keyboard(),
    )

@router.message(X2GameState.waiting_for_bet, F.text.regexp(r"^\d+(\.\d+)?$"))
async def x2_game_bet_handler(message: types.Message, state: FSMContext) -> None:
    telegram_id = message.from_user.id
    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)

        try:
            bet = Decimal(message.text)
        except Exception:
            return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.")

        if bet <= 0:
            return await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        if user.stars < bet:
            return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥–æ—á–µ–∫ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.")

    await state.update_data(bet=bet)
    await state.set_state(X2GameState.waiting_for_choice)
    await message.answer(
        f"–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã–ø–∞–¥–µ—Ç?",
        reply_markup=x2game_keyboard()
    )

@router.callback_query(X2GameState.waiting_for_choice, F.data.startswith("choice_"))
async def x2_game_result_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    telegram_id = callback.from_user.id
    user_choice = callback.data.split("_")[-1]

    async with SessionLocal() as session:
        user = await get_user_by_telegram_id(session, telegram_id)

        data = await state.get_data()
        bet = data.get("bet")
        if not bet:
            return await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        
        win_chance = await get_game_setting(session, "x2_win_chance")
        if win_chance is None:
            win_chance = 30

        win_chance = float(win_chance)
        rand = random.uniform(0, 100)
        win = rand <= win_chance

        even_numbers = [2, 4, 6, 8, 10]
        odd_numbers = [1, 3, 5, 7, 9]

        if user_choice == "even":
            number = random.choice(even_numbers) if win else random.choice(odd_numbers)
        elif user_choice == "odd":
            number = random.choice(odd_numbers) if win else random.choice(even_numbers)

        await save_x2game_results(session, user, bet, win)

        if win:
            await callback.message.edit_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet * 2:.2f} ‚≠êÔ∏è\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}.", reply_markup=play_x2game_again())
        else:
            await callback.message.edit_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {number}.", reply_markup=play_x2game_again())

    await state.clear()